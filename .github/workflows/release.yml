name: Build and Release

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  schedule:
    - cron: '0 0 * * *'  # UTC midnight
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release to create'
        required: true
        default: 'test'
        type: choice
        options:
          - 'test'
          - 'nightly'
          - 'release'

jobs:
  determine-build-type:
    name: Determine Build Type
    runs-on: ubuntu-latest
    outputs:
      build-type: ${{ steps.set-build-type.outputs.build-type }}
      release-name: ${{ steps.set-build-type.outputs.release-name }}
      should-build: ${{ steps.check-changes.outputs.should-build }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check for changes
      id: check-changes
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          git fetch origin main
          LAST_COMMIT=$(git log -1 --format=%ct)
          LAST_DAY=$(date -d "yesterday" +%s)
          if [[ $LAST_COMMIT -gt $LAST_DAY ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "should-build=true" >> $GITHUB_OUTPUT
        fi

    - name: Determine build type and release name
      id: set-build-type
      if: steps.check-changes.outputs.should-build == 'true'
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "build-type=manual-${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          echo "release-name=Manual ${{ github.event.inputs.release_type }} Build $(date +'%Y-%m-%d-%H%M%S')" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
          echo "build-type=release" >> $GITHUB_OUTPUT
          echo "release-name=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "build-type=nightly" >> $GITHUB_OUTPUT
          echo "release-name=Nightly Build $(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        else
          echo "build-type=development" >> $GITHUB_OUTPUT
          echo "release-name=Development Build $(date +'%Y-%m-%d-%H%M%S')" >> $GITHUB_OUTPUT
        fi

  create-release:
    name: Create Release
    needs: determine-build-type
    if: needs.determine-build-type.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ needs.determine-build-type.outputs.release-name }}
        draft: false
        prerelease: ${{ needs.determine-build-type.outputs.build-type != 'release' }}

  build-and-upload:
    name: Build and Upload Asset
    needs: [determine-build-type, create-release]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            extension: dmg
          - os: ubuntu-latest
            extension: AppImage
          - os: windows-latest
            extension: exe
    env:
      OUTPUT_NAME: ${{ github.event.repository.name }}-${{ needs.determine-build-type.outputs.build-type }}.${{ matrix.extension }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow numpy

    - name: Install additional tools
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y imagemagick
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install imagemagick
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          choco install imagemagick.app
        fi
      shell: bash

    - name: Generate icons
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          mkdir MyIcon.iconset
          sips -z 16 16     icon_1024x1024.png --out MyIcon.iconset/icon_16x16.png
          sips -z 32 32     icon_1024x1024.png --out MyIcon.iconset/icon_16x16@2x.png
          sips -z 32 32     icon_1024x1024.png --out MyIcon.iconset/icon_32x32.png
          sips -z 64 64     icon_1024x1024.png --out MyIcon.iconset/icon_32x32@2x.png
          sips -z 128 128   icon_1024x1024.png --out MyIcon.iconset/icon_128x128.png
          sips -z 256 256   icon_1024x1024.png --out MyIcon.iconset/icon_128x128@2x.png
          sips -z 256 256   icon_1024x1024.png --out MyIcon.iconset/icon_256x256.png
          sips -z 512 512   icon_1024x1024.png --out MyIcon.iconset/icon_256x256@2x.png
          sips -z 512 512   icon_1024x1024.png --out MyIcon.iconset/icon_512x512.png
          cp icon_1024x1024.png MyIcon.iconset/icon_512x512@2x.png
          iconutil -c icns MyIcon.iconset
          mv MyIcon.icns ${{ github.event.repository.name }}.icns
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          convert icon_1024x1024.png -resize 256x256 ${{ github.event.repository.name }}.png
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          magick convert icon_1024x1024.png -define icon:auto-resize=256,128,64,48,32,16 ${{ github.event.repository.name }}.ico
        fi
      shell: bash

    - name: Create .desktop file for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cat > ${{ github.event.repository.name }}.desktop << EOL
        [Desktop Entry]
        Type=Application
        Name=Font Legibility Benchmark
        Exec=${{ github.event.repository.name }}
        Icon=${{ github.event.repository.name }}
        Categories=Utility;
        EOL
      shell: bash

    - name: Build with PyInstaller
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          pyinstaller --onefile --windowed --icon=${{ github.event.repository.name }}.icns --name ${{ github.event.repository.name }} main.py
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          pyinstaller --onefile --windowed --icon=${{ github.event.repository.name }}.png --name ${{ github.event.repository.name }} --add-data "${{ github.event.repository.name }}.desktop:." --add-data "${{ github.event.repository.name }}.png:." main.py
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          pyinstaller --onefile --windowed --icon=${{ github.event.repository.name }}.ico --name ${{ github.event.repository.name }} main.py
        fi
      shell: bash

    - name: Package for macOS
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p dist/dmg
        mv dist/${{ github.event.repository.name }}.app dist/dmg/
        hdiutil create -volname "Font Legibility Benchmark" -srcfolder dist/dmg -ov -format UDZO "${{ env.OUTPUT_NAME }}"
      env:
        OUTPUT_NAME: ${{ github.event.repository.name }}-${{ needs.determine-build-type.outputs.build-type }}.dmg

    - name: Package for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y fuse
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        mkdir -p ${{ github.event.repository.name }}.AppDir/usr/bin
        mkdir -p ${{ github.event.repository.name }}.AppDir/usr/share/applications
        mkdir -p ${{ github.event.repository.name }}.AppDir/usr/share/icons/hicolor/256x256/apps
        cp dist/${{ github.event.repository.name }} ${{ github.event.repository.name }}.AppDir/usr/bin/
        cp ${{ github.event.repository.name }}.desktop ${{ github.event.repository.name }}.AppDir/
        cp ${{ github.event.repository.name }}.desktop ${{ github.event.repository.name }}.AppDir/usr/share/applications/
        cp ${{ github.event.repository.name }}.png ${{ github.event.repository.name }}.AppDir/usr/share/icons/hicolor/256x256/apps/
        cp ${{ github.event.repository.name }}.png ${{ github.event.repository.name }}.AppDir/
        ./appimagetool-x86_64.AppImage ${{ github.event.repository.name }}.AppDir "${{ env.OUTPUT_NAME }}"
      shell: bash

    - name: Package for Windows
      if: matrix.os == 'windows-latest'
      run: |
        ls dist
        if [ -f "dist/${{ github.event.repository.name }}.exe" ]; then
          mv "dist/${{ github.event.repository.name }}.exe" "${{ env.OUTPUT_NAME }}"
          echo "Successfully moved the executable"
        else
          echo "File not found: dist/${{ github.event.repository.name }}.exe"
          echo "Contents of dist directory:"
          ls dist
          exit 1
        fi
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ env.OUTPUT_NAME }}
        asset_name: ${{ env.OUTPUT_NAME }}
        asset_content_type: application/octet-stream
